swagger: "2.0"
info:
  description: "REST API for Parking Lot Management Service"
  version: "1.0.0"
  title: "Parking Lot Management API"
basePath: "/v2"
tags:
- name: "Gates"
- name: "Stalls"
- name: "Tickets"
schemes:
- "http"
paths:
  /api/v1/gates/{id}:
    get:
      tags:
      - "Gates"
      summary: "Get a gate by ID"
      description: "Returns information on a single gate"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of gate to return"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Gate"
        404:
          description: "Gate not found"
    patch:
      tags: 
      - "Gates"
      summary: "Update a gate by ID"
      description: "Updates information on a single gate"
      produces: 
      - "application/json"
      parameters: 
      - name: "id"
        in: "path"
        description: "ID of gate to update"
        required: true
        type: "string"
      - name: "request"
        in: "body"
        description: "Request body"
        required: true
        schema:
          $ref: "#/definitions/UpdateGateRequest"        
      responses:
        200:
          description: "Successfully updated"
          schema:
            $ref: "#/definitions/Link"
        404:
          description: "Gate not found"
    delete:
      tags: 
      - "Gates"
      summary: "Delete a gate by ID"
      description: "Deletes a single gate"
      parameters: 
      - name: "id"
        in: "path"
        description: "ID of gate to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "Successfully deleted"
        404:
          description: "Gate not found"
  /api/v1/gates:
    get:
      tags:
      - "Gates"
      summary: "Get all gates"
      description: "Returns information on all gates"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            items:
              $ref: "#/definitions/Gate"
    post:
      tags: 
      - "Gates"
      summary: "Create a gate"
      description: "Creates a single gate"
      parameters: 
      - name: "request"
        in: "body"
        description: "Request body"
        required: false
        schema:
          $ref: "#/definitions/CreateGateRequest"
      produces: 
      - "application/json"
      responses:
        201:
          description: "Successfully created"
          schema:
            $ref: "#/definitions/Link"
  /api/v1/stalls/{id}:
    get:
      tags:
      - "Stalls"
      summary: "Get a parking stall by ID"
      description: "Returns information on a single parking stall"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of parking stall to return"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Stall"
        404:
          description: "Parking stall not found"
    patch:
      tags: 
      - "Stalls"
      summary: "Update a parking stall by ID"
      description: "Updates information on a single parking stall"
      produces: 
      - "application/json"
      parameters: 
      - name: "id"
        in: "path"
        description: "ID of parking stall to update"
        required: true
        type: "string"
      - name: "request"
        in: "body"
        description: "Request body"
        required: true
        schema:
          $ref: "#/definitions/UpdateStallRequest"        
      responses:
        200:
          description: "Successfully updated"
          schema:
            $ref: "#/definitions/Link"
        404:
          description: "Parking stall not found"
    delete:
      tags: 
      - "Stalls"
      summary: "Delete a parking stall by ID"
      description: "Deletes a single parking stall"
      parameters: 
      - name: "id"
        in: "path"
        description: "ID of parking stall to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "Successfully deleted"
        404:
          description: "Parking stall not found"
  /api/v1/stalls:
    get:
      tags:
      - "Stalls"
      summary: "Get all parking stalls"
      description: "Returns information on all parking stalls"
      parameters: 
      - name: "filter"
        in: "query"
        description: "Filter to apply on results"
        required: false
        type: "string"
        enum: ["ALL", "AVAILABLE", "UNAVAILABLE", "OUTOFORDER"]
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            items:
              $ref: "#/definitions/Stall"
    post:
      tags: 
      - "Stalls"
      summary: "Create a parking stall"
      description: "Creates a single parking stall"
      parameters: 
      - name: "request"
        in: "body"
        description: "Request body"
        required: false
        schema:
          $ref: "#/definitions/CreateStallRequest"
      produces: 
      - "application/json"
      responses:
        201:
          description: "Successfully created"
          schema:
            $ref: "#/definitions/Link"
  /api/v1/tickets/{id}:
    get:
      tags:
      - "Tickets"
      summary: "Get a parking ticket by ID"
      description: "Returns information on a single parking ticket"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of parking ticket to return"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Ticket"
        404:
          description: "Parking ticket not found"
    patch:
      tags: 
      - "Tickets"
      summary: "Update a parking ticket by ID"
      description: "Updates information on a single parking ticket"
      produces: 
      - "application/json"
      parameters: 
      - name: "id"
        in: "path"
        description: "ID of parking ticket to update"
        required: true
        type: "string"
      - name: "request"
        in: "body"
        description: "Updates information on a single parking ticket"
        required: true
        schema:
          $ref: "#/definitions/UpdateTicketRequest"
      responses:
        200:
          description: "Successfully updated"
          schema:
            $ref: "#/definitions/Link"
        404:
          description: "Parking ticket not found"
  /api/v1/tickets:
    get:
      tags:
      - "Tickets"
      summary: "Get all parking tickets"
      description: "Returns information on all parking tickets"
      parameters:
      - name: "filter"
        in: "query"
        description: "Filter to apply on results"
        required: false
        type: "string"
        enum: ["ALL", "ACTIVE", "CLOSED"]
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            items:
              $ref: "#/definitions/Ticket"
    post:
      tags:
      - "Tickets"
      summary: "Create a parking ticket"
      description: "Attempts to create a parking ticket if space is available"
      produces:
      - "application/json"
      responses:
        201:
          description: "Parking ticket sucessfully created and parking stall reserved"
          schema:
            $ref: "#/definitions/Link"
        204:
          description: "Parking ticket not created due to parking lot capacity reached"
definitions:
  Gate:
    type: "object"
    title: "Gate"
    properties:
      id:
        type: "string"
      status:
        type: "string"
      createDate:
        type: "string"
        format: "date-time"
      updateDate:
        type: "string"
        format: "date-time"
    required: ["id", "status", "createDate", "updateDate"]
  CreateGateRequest:
    type: "object"
    title: "Create Gate"
    description: "Request Body for POST /api/v1/gates"
    properties:
      status:
        type: "string"
  UpdateGateRequest:
    type: "object"
    title: "Update Gate"
    description: "Request Body for PATCH /api/v1/gates/{id}"
    properties:
      status:
        type: "string"
      reason:
        type: "string"
    required: ["status"]
  Stall:
    type: "object"
    title: "Stall"
    properties:
      id:
        type: "string"
      status:
        type: "string"
      ticket:
        $ref: '#/definitions/Link'
    required: ["id", "status"]
  CreateStallRequest:
    type: "object"
    title: "Create Stall"
    description: "Request Body for POST /api/v1/stalls"
    properties:
      status:
        type: "string"
  UpdateStallRequest:
    type: "object"
    title: "Update Stall"
    description: "Request Body for PATCH /api/v1/stalls/{id}"
    properties:
      status:
        type: "string"
      reason:
        type: "string"
    required: ["status"]
  Ticket:
    type: "object"
    title: "Ticket"
    properties:
      id:
        type: "string"
      status:
        type: "string"
      stall:
        $ref: "#/definitions/Link"
  UpdateTicketRequest:
    type: "object"
    title: "Update Ticket"
    description: "Request Body for PATCH /api/v1/tickets/{id}"
    properties:
      status:
        type: "string"
    required: ["status"]
  Link:
    type: "object"
    title: "Link"
    properties:
      id:
        type: "string"
      link: 
        type: "string"
        format: "url"
    required: ["id", "link"]